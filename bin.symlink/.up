#!/usr/bin/env sh

# Colors (http://kedar.nitty-witty.com/blog/how-to-echo-colored-text-in-shell-script)
txtgrn=$(tput setaf 2)  # Green
txtrst=$(tput sgr0)     # Text reset

function success() {
  echo "${txtgrn}$1${txtrst}"
}

# Update homebrew.
function update_brew() {
  if [ `which brew` ]; then
    brew update > /dev/null 2>&1 && brew upgrade > /dev/null 2>&1 && brew cleanup > /dev/null 2>&1
    success "  - Done updating homebrew."
  fi
}

# Update all git submodules.
function update_submodules() {
  git submodule foreach git pull > /dev/null 2>&1
  success "  - Done updating git submodules."
}

# Update antigen projects.
function update_antigen() {
  zsh -c "source \"$HOME/.zsh/antigen.zsh\" && antigen update" > /dev/null 2>&1
  success "  - Done updating antigen."
}

# Update vundle
function update_vundle() {
  cd vim.symlink/bundle/vundle && git pull > /dev/null 2>&1 && cd - > /dev/null 2>&1
  vim +PluginInstall! +qall > /dev/null 2>&1
  success "  - Done updating vim plugins."
}

# Update composer projects
function update_composer() {
  which composer > /dev/null 2>&1 && cd composer.symlink && composer --dev --quiet update > /dev/null 2>&1 && cd - > /dev/null 2>&1
  success "  - Done updating composer libraries."
}

# Store the current directory and switch to the project root.
DIR=$(pwd)
cd "$(dirname "$(readlink -f "$0")")/.."

# If there are changes, stash them.
STASH_COUNT=`git stash list | wc -l`
git stash --quiet

/bin/echo -n "Git pulling..."
git pull origin master > /dev/null 2>&1
echo "done."

echo "Kicking off update processes..."
update_composer &
update_brew &
update_submodules &
update_antigen &
update_vundle &
wait
echo "All subprocesses complete."

# Finally, commit the results.
git status --porcelain | grep '^ M' | awk '{print $2}' | xargs git add
if [ -n "$(git status --porcelain | grep '^M')" ]; then
  git ci -m "Updating submodules, vim plugins, composer packages, and/or brew list."
  git push origin master
else
  echo "Nothing updated, no push needed."
fi

# Unstash if necessary.
if [ $STASH_COUNT != `git stash list | wc -l` ]; then
  git stash pop --quiet
fi

cd "$DIR"
exit 0

#!/usr/bin/env sh

# Store the current directory and switch to the project root.
DIR=$(pwd)
cd "$(dirname "$(greadlink -f "$0")")/.." || exit 1

STASH_COUNT=$(git stash list | wc -l)

unstash() {
  if [ "$STASH_COUNT" != "$(git stash list | wc -l)" ]; then
    git stash pop --quiet
  fi
}

trap ctrl_c INT TERM
ctrl_c() {
  unstash
  echo "*** Returning you to $DIR"
  cd "$DIR" || exit 1
  exit 0
}

# If there are changes, stash them.
git stash --quiet

git pull origin master

# homebrew and casks.
if which brew > /dev/null; then
  brew update
  brew upgrade
  brew cask outdated | awk '{print $1}' | xargs brew cask reinstall
  brew cleanup
fi

# Apps from the App Store.
if which mas > /dev/null; then
  mas upgrade
fi

# git submodules.
git submodule foreach git pull

# zsh plugins.
zsh -c "source \"$ZPLUG_HOME/init.zsh\" && source \"$HOME/.zsh/zplug.zsh\" && zplug update"

# vim plugins
vim +PlugUpgrade +PlugUpdate +qall

# pipsi packages
for pkg in $(pipsi list --versions | tail -n +2 | awk -F\" '{ print $2 }'); do
  echo "Updating pipsi package $pkg"
  pipsi upgrade "$pkg" > /dev/null
done

# composer projects
if which composer > /dev/null && [ -f ~/.composer/composer.json ] && [ "$(jq '.require|length' < ~/.composer/composer.json)" -gt 0 ]; then
  cd composer.symlink || exit 1
  composer --dev update
  cd - > /dev/null || exit 1;
else
  echo "Composer: no packages defined, skipping."
fi

# Finally, commit the results.
git status --porcelain | grep '^ M' | awk '{print $2}' | xargs git add
if git status --porcelain | grep --silent '^M'; then
  git ci -m "Updating submodules, vim plugins, composer packages, and/or brew list."
  git push origin master
else
  echo "Nothing updated, no push needed."
fi

# Unstash if necessary.
unstash

cd "$DIR" || exit 1
exit 0
